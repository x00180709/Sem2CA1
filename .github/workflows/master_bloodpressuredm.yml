# Docs for the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# More GitHub Actions for Azure: https://github.com/Azure/actions

name: Build and deploy Blood Pressure App to Azure Web App

env:
  AZURE_WEBAPP_NAME: bloodpressuredm
  AZURE_WEBAPP_PACKAGE_PATH: 'publish'
  URI: https://bloodpressuredm.azurewebsites.net

on:
  # push:
  #   branches:
  #     - master
  workflow_dispatch:

jobs:
  Build_Sonar_Deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Dotnet Build
        run: dotnet build --configuration Release

      - name: Run Unit Tests
        run: dotnet test Unit_Tests/Unit_Tests.csproj --no-restore --collect "XPlat Code Coverage" -l:trx

      - name: Publish Unit Test Results
        uses: dorny/test-reporter@v1
        if: success() || failure()
        with:
          name: MS Test Results
          path: '**.trx'
          reporter: 'dotnet-trx'
      
      - name: Ensure browsers are installed for Playwright
        shell: pwsh
        run: |
            Push-Location '/home/runner/work/Sem2CA1/Sem2CA1/PlaywrightTests/bin/Debug/net6.0/';
            .\playwright.ps1 install --with-deps;
            Pop-Location;
      
      - name: Run PLaywright Tests
        run: dotnet test PlaywrightTests/PlaywrightTests.csproj --no-restore -l:trx

      - name: SonarScanner for .NET 6
        uses: highbyte/sonarscan-dotnet@v2.1.3
        with:
          sonarProjectKey: x00180709
          sonarProjectName:  x00180709
          sonarOrganization: x00180709
          dotnetTestArguments: --logger trx --collect:"XPlat Code Coverage" -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover
          sonarBeginArguments: /d:sonar.cs.opencover.reportsPaths="**/TestResults/**/coverage.opencover.xml" -d:sonar.cs.vstest.reportsPaths="**/TestResults/*.trx"
        
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  Dependency_Check:
    runs-on: ubuntu-latest
    name: OWASP_Dependency_Check
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        
      - name: Depcheck
        uses: dependency-check/Dependency-Check_Action@main
        id: Depcheck
        with:
          project: 'BPCalculator'
          path: '.'
          format: 'HTML'
          out: 'reports' # this is the default, no need to specify unless you wish to override it
          args: >
            --failOnCVSS 7
            --enableRetired

      - name: Upload Test results
        uses: actions/upload-artifact@master
        with:
           name: Depcheck report
           path: ${{github.workspace}}/reports

  # tests_e2e:
  #   runs-on: windows-latest
  #   name: Run end-to-end tests
  #   steps:
  #   - uses: actions/checkout@v3
  #   - name: Setup dotnet
  #     uses: actions/setup-dotnet@v2
  #     with:
  #       dotnet-version: 6.0.x
  #   - run: dotnet build
  #   - name: Ensure browsers are installed
  #     run: pwsh bin\Debug\net6.0\playwright.ps1 install --with-deps
  #   - name: Run your tests
  #     run: dotnet test #runs against chrome
  #     run: BROWSER=firefox dotnet test #cross browser

  Deploy_to_Staging:
    name: Deploy to Azure web service
    needs: Build_Sonar_Deploy
    # environment:
    #   name: QA
    #   url: "https://bloodpressuredm-bloodpressuredm-qa.azurewebsites.net"
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Publish Blood Pressure Calc
      run: dotnet publish -c Release -o ${{env.AZURE_WEBAPP_PACKAGE_PATH}}/myapp

    - name: Deploy to Azure Web App
      id: deploy-to-webapp
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ env.AZURE_WEBAPP_NAME }}
        slot-name: Production
        publish-profile: ${{ secrets.AZUREAPPSERVICE_PUBLISHPROFILE_470A4E3A8794471282F0681E8F186702 }}
        package: '${{ env.AZURE_WEBAPP_PACKAGE_PATH }}/myapp'

    # # login to Azure account
    # - uses: azure/login@v1
    #   with:
    #     creds: ${{ secrets.AZURE_CREDENTIALS }}                         # JSON objects which represents service principal

    # # blue/green
    # - name: swap QA and production slots
    #   run: |
    #     az webapp deployment slot swap -n bloodpressuredm-staging -g lab1 --slot staging --target-slot production
  
  K6_Load_Test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Pull Docker image used for k6
      run: docker pull loadimpact/k6

    - name: Run load tests and save output
      run: docker run -i loadimpact/k6 run - <PerfTestCA1.js > k6output.txt

    - uses: actions/upload-artifact@v3
      with:
        name: k6output
        path: /report/k6output.txt

  zap_baseline_scan:
    runs-on: ubuntu-latest
    steps:
    - name: Pull Docker image for ZAP
      run: docker pull owasp/zap2docker-weekly

    - name: Run baseline scan
      run: docker run -v /report:/zap/wrk/:rw --user root -t owasp/zap2docker-weekly zap-baseline.py -t ${{env.URI}} -I -r zapreport.html
  
    - uses: actions/upload-artifact@v2
      name: upload ZAP report
      with:
        name: ZAPreport
        path: /report/zapreport.html